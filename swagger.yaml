openapi: 3.0.3
info:
  title: Cornerstone
  version: 1.0.0
servers:
  - url: https://apicompanion-dev.bytequest.solutions/api/v1
tags:
  - name: Signup and Login
    description: Authentication Management
  - name: Google Authentication
    description: Google Authentication Management
  - name: Password
    description: Password Reset Management
  - name: Users
    description: User Management
paths:
  /notifications:
    get:
      tags:
        - Notifications
      operationId: FetchNotifications
      responses:
        "200":
          description: Registered Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Notification"
  /notifications/{notification_id}:
    get:
      tags:
        - Notifications
      operationId: MarkNotificationAsRead
      responses:
        "200":
          description: Read successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /auth/access-token/generate:
    post:
      tags:
        - Signup and Login
      operationId: GenerateAccessToken
      requestBody:
        content:
          application/json:
            schema:
              required:
                - refreshToken
              type: object
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6ImhzYW1pZC5hYWgwQGdtYWlsLmNvbSIsIklEIjoiMGFmMTI5ODMtODMzZS00ZDQ0LWJkMzAtNDczOWUyZjBjYmYyIiwiZXhwIjoxNzA5NDY3NjM2LCJpYXQiOjE3MDk0NjA0MzYsImlzcyI6Im1vaGFtbWFkIn0.eU6UyDmdVlIWnuOVQyLi8iVci6WQFa1Tjxl7FMEcQ2U
      responses:
        "200":
          description: Registered Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6ImhzYW1pZC5hYWgwQGdtYWlsLmNvbSIsIklEIjoiMGFmMTI5ODMtODMzZS00ZDQ0LWJkMzAtNDczOWUyZjBjYmYyIiwiZXhwIjoxNzA5NDY3NjM2LCJpYXQiOjE3MDk0NjA0MzYsImlzcyI6Im1vaGFtbWFkIn0.eU6UyDmdVlIWnuOVQyLi8iVci6WQFa1Tjxl7FMEcQ2U
  /auth/register:
    post:
      tags:
        - Signup and Login
      operationId: Signup
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
                - email
                - password
                - studentId
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: John.Doe@gmail.com
                studentId:
                  type: string
                  example: some-student-id
                password:
                  type: string
                  example: $1234abcd
      responses:
        "200":
          description: Registered Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Login"

  /auth/login:
    post:
      tags:
        - Signup and Login
      operationId: Login
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
                - password
              type: object
              properties:
                email:
                  type: string
                  example: John.Doe@gmail.com
                password:
                  type: string
                  example: $1234abcd
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Login"
                  message:
                    type: string

  /auth/google:
    get:
      tags:
        - Google Authentication
      operationId: Google Redirect URL
      description: Redirect to the Google Login Page
      responses:
        "200":
          description: Successful Operation
    post:
      tags:
        - Google Authentication
      operationId: Google Signup or Login
      description: Google Signup or Login
      requestBody:
        content:
          application/json:
            schema:
              required:
                - code
              type: object
              properties:
                code:
                  type: string
                  example: 4/0AeaYSHCoSLQlzCvmwNfx_purqgyrLWJ2l2JvhmpRW9-amog1Suymw6HL64lKDfOYadviPg
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Login"
                  message:
                    type: string

  /auth/forget-password:
    post:
      tags:
        - Password
      operationId: Forget Password
      description: Send a Password Reset Link to Provided Email
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
              type: object
              properties:
                email:
                  type: string
                  example: John.Doe@gmail.com
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /auth/reset-password:
    post:
      tags:
        - Password
      operationId: Reset Password
      description: Changes the Password of the User Who Requested to Reset the Password
      requestBody:
        content:
          application/json:
            schema:
              required:
                - token
                - password
              type: object
              properties:
                token:
                  type: string
                  example: 1I69UCa0BxqtIYVx23Lc
                password:
                  type: string
                  example: $1234abcd
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /auth/validate-token:
    post:
      tags:
        - Password
      operationId: Validate Token
      description: Validates the token from forget password email
      requestBody:
        content:
          application/json:
            schema:
              required:
                - token
              type: object
              properties:
                token:
                  type: string
                  example: 1234
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: array

  /profile:
    get:
      tags:
        - Users
      operationId: User Profile
      description: User's All Information
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Profile"
    patch:
      tags:
        - Users
      operationId: Update User Profile
      description: Update User's Email and Name
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                phoneNumber:
                  type: string
                  example: +1231456789
                about:
                  type: string
                  example: "something about the user"
                title:
                  type: string
                  example: A title that user wants
                avatar:
                  type: string
                  example: "avatar/uploaded-file-name.jpg"
                background:
                  type: string
                  example: "background/uploaded-file-name.jpg"
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /profile/upload:
    post:
      tags:
        - Users
      operationId: Upload user avatar or background image
      description: Upload user avatar or background image
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                imageType:
                  type: string
                  example: avatar,background
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      fileName:
                        type: string
                        example: File name to be used in create post as attachment
                      url:
                        type: string
                        example: https://path-to-image.com
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
  /posts:
    get:
      tags:
        - Posts
      operationId: Feed
      description: Latest visible posts for user with pagination and filter for user
      parameters:
        - name: page
          in: query
          description: The page of the content
          required: false
          schema:
            type: string
            example: some-generated-uuid
        - name: perPage
          in: query
          description: The amount of the posts in one request
          required: false
          schema:
            type: string
            example: some-generated-uuid
        - name: userId
          in: query
          description: The user id that you want to fetch his/her posts
          required: false
          schema:
            type: string
            example: some-uuid
        - name: postType
          in: query
          description: The post type you want to get from the API
          required: true
          schema:
            type: string
            example: Event,Marketplace,Social,Coop
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Post"
                  meta:
                    $ref: "#/components/schemas/Meta"
    post:
      tags:
        - Posts
      operationId: Create Post
      description: Create a new post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: Some example content for your post
                visibility:
                  type: string
                  example: Public,Private
                attachments:
                  type: array
                  items:
                    type: string
                    example: The file name you get from the upload api
                type:
                  type: string
                  example: Social,Marketplace,Coop
      security:
        - bearerAuth: [ ]
      responses:
        "201":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Post"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
  /posts/event:
    post:
      tags:
        - Posts
      operationId: Create Event
      description: Create a new post with the type of event
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: Some post or event content
                attachments:
                  type: array
                  items:
                    type: string
                    example: The file name you get from the upload api
                type:
                  type: string
                  example: InPerson,Online
                visibility:
                  type: string
                  example: Public,Private
                eventName:
                  type: string
                  example: Some event name
                externalLink:
                  type: string
                  example: https://google.com
                location:
                  type: string
                  example: Canada, Vancouver, etc.
                startDate:
                  type: string
                  example: "2024-03-24 05:09:30.709 +0330 +0330"
                endDate:
                  type: string
                  example: "2024-03-24 05:09:30.709 +0330 +0330"
      security:
        - bearerAuth: [ ]
      responses:
        "201":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Event"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
  /posts/{post_id}:
    get:
      tags:
        - Posts
      operationId: Fetch Post
      description: Fetch a post with the given ID
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Post"
        "404":
          description: Post Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Requested resource not found
    put:
      tags:
        - Posts
      operationId: Update Post
      description: Update an existing post of the user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: Some example content for your post
                visibility:
                  type: string
                  example: Public,Private
                attachments:
                  type: array
                  items:
                    type: string
                    example: The file name from the upload api
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Event"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
        "403":
          description: User does not have access to modify the post
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access to the resource is forbidden for this user
        "404":
          description: Post does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested resource not found.
    delete:
      tags:
        - Posts
      operationId: Delete Post
      description: Delete an existing post of the user
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Event"
        "404":
          description: Post Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested resource not found.
        "403":
          description: User does not have access to modify the post
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access to the resource is forbidden for this user
  /posts/{post_id}/event:
    put:
      tags:
        - Posts
      operationId: Update Post With Event Type
      description: Update an existing event of the user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: Some post or event content
                visibility:
                  type: string
                  example: Public,Private
                attachments:
                  type: array
                  items:
                    type: string
                    example: The file name from the upload api
                type:
                  type: string
                  example: InPerson,Online
                eventName:
                  type: string
                  example: Some event name
                externalLink:
                  type: string
                  example: https://google.com
                location:
                  type: string
                  example: Canada, Vancouver, etc.
                startDate:
                  type: string
                  example: "2024-04-28T20:21:26.854076419Z"
                endDate:
                  type: string
                  example: "2024-04-28T20:21:26.854076419Z"
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Event"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
        "403":
          description: User does not have access to modify the post
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access to the resource is forbidden for this user
        "404":
          description: Post does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested resource not found.
  /posts/{post_id}/attendees:
    get:
      tags:
        - Posts
      operationId: Get Attendees
      description: Get Attendees of a post
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: some-generated-uuid
                        name:
                          type: string
                          example: John Doe
                        title:
                          type: string
                          example: Backend Developer
                        avatar:
                          type: string
                          example: https://url-to-avatar.com
                        attendDate:
                          type: string
                          example: "2024-04-28T20:21:26.854076419Z"
  /posts/{post_id}/attend:
    patch:
      tags:
        - Posts
      description: Attend To An Event
      operationId: Attend to a post with event type
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Resource has been updated successfully.
        "409":
          description: User Attended Before
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User has been attended to this event before
        "403":
          description: User cannot attend to regular post
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access to the resource is forbidden for this user
        "404":
          description: Post does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested resource not found.
  /posts/attachments/upload:
    post:
      tags:
        - Posts
      description: Upload Post Attachment
      operationId: Upload attachment to use in a post
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                attachment:
                  type: string
                  format: binary
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      fileName:
                        type: string
                        example: File name to be used in create post as attachment
                      url:
                        type: string
                        example: https://path-to-image.com
                      fileType:
                        type: string
                        example: image,video
                      fileExtension:
                        type: string
                        example: .jpg
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object

  /comments:
    post:
      tags:
        - Comments
      description: Create Comment
      operationId: CreateComment
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: resource has been created successfully
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  example: some comment body
                postID:
                  type: string
                  example: some-generated-uuid
                parentID:
                  type: string
                  example: some-generated-uuid(nullable)
    get:
      tags:
        - Comments
      description: Fetch Comments
      operationId: FetchComments
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  parent:
                    $ref: "#/components/schemas/Comment"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
                  meta:
                    $ref: "#/components/schemas/Meta"
      parameters:
        - name: post_id
          in: query
          description: The post you wanna fetch comments from
          required: true
          schema:
            type: string
            example: some-generated-uuid
        - name: parent_id
          in: query
          description: The parent which you wanna see its children in the post
          required: false
          schema:
            type: string
            example: some-generated-uuid
  /comments/{comment_id}:
    put:
      tags:
        - Comments
      description: Update Comment
      operationId: UpdateComment
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: resource has been updated successfully
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  example: some comment body
    delete:
      tags:
        - Comments
      description: Delete Comment
      operationId: DeleteComment
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: resource has been deleted successfully
  /reactions:
    get:
      tags:
        - Reactions
      operationId: Reacted users list to a reactive
      description: Latest user reacted to a reactive(post or comment)
      parameters:
        - name: page
          in: query
          description: The page of the content
          required: false
          schema:
            type: string
            example: some-generated-uuid
        - name: perPage
          in: query
          description: The amount of the posts in one request
          required: false
          schema:
            type: string
            example: some-generated-uuid
        - name: reactiveId
          in: query
          description: The ID of the comment or the post you want to see its reactions
          required: true
          schema:
            type: string
            example: some-uuid
        - name: reactiveType
          in: query
          description: The type of the reactive(Only use the ones in the example section)
          required: true
          schema:
            type: string
            example: Post,Comment
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Reaction"
                  meta:
                    $ref: "#/components/schemas/Meta"
    post:
      tags:
        - Reactions
      description: React to a reactive
      operationId: ReactToReactive
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: resource has been created successfully
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
        "409":
          description: User has already reacted to it
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You already reacted to this resource
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reactiveType:
                  type: string
                  example: Comment,Post
    delete:
      tags:
        - Reactions
      description: Remove reaction from a resource
      operationId: RemoveReactionFromResource
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: resource has been deleted successfully
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
        "404":
          description: Post Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Requested resource not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reactions:
                  type: array
                  items:
                    type: object
                    properties:
                      reactiveId:
                        type: string
                        example: some-uuid
                      reactiveType:
                        type: string
                        example: Post,Comment

  /assets:
    get:
      tags:
        - Assets
      operationId: Fetch assets
      description: Latest assets of the application
      parameters:
        - name: page
          in: query
          description: The page of the content
          required: false
          schema:
            type: integer
            example: 1
        - name: perPage
          in: query
          description: The amount of the assets in one request
          required: false
          schema:
            type: integer
            example: 20
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Asset"
                  meta:
                    $ref: "#/components/schemas/Meta"

  /services:
    get:
      tags:
        - Services
      operationId: Fetch services
      description: Latest services of the application
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page
          in: query
          description: The page of the content
          required: false
          schema:
            type: integer
            example: 1
        - name: perPage
          in: query
          description: The amount of the assets in one request
          required: false
          schema:
            type: integer
            example: 20
        - name: categoryId
          in: query
          description: The category of the services
          required: false
          schema:
            type: string
            example: some-generated-uuid
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Service"
                  meta:
                    $ref: "#/components/schemas/Meta"

  /services/{service_id}:
    get:
      tags:
        - Services
      operationId: Fetch Service
      description: Fetch a service with the given ID
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Service"
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Requested resource not found


  /categories:
    get:
      tags:
        - Categories
      operationId: Fetch categories
      description: Latest categories of the application
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page
          in: query
          description: The page of the content
          required: false
          schema:
            type: integer
            example: 1
        - name: perPage
          in: query
          description: The amount of the assets in one request
          required: false
          schema:
            type: integer
            example: 20
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
                  meta:
                    $ref: "#/components/schemas/Meta"

  /categories/{category_id}:
    get:
      tags:
        - Categories
      operationId: Fetch category
      description: Fetch a category with the given ID
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Category"
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Requested resource not found
  /devices:
    post:
      tags:
        - Devices
      description: Store device/firebase ID in the storage
      operationId: StoreDevice
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: resource has been created successfully
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fireBaseId:
                  type: string
                  example: some-firebase-id
                deviceId:
                  type: string
                  example: some-device-id
                deviceName:
                  type: string
                  example: IPhone 13 Pro Max
                os:
                  type: string
                  example: IOS
                osName:
                  type: string
                  example: IOS 15.2
  /devices/topic/subscribe:
    get:
      tags:
        - Devices
      description: Register user to Student Topic
      operationId: RegisterUserToStudentTopic
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: resource has been created successfully
  /devices/revoke:
    patch:
      tags:
        - Devices
      description: Revoke all existing user devices
      operationId: RevokeUserDevices
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: resource has been updated successfully
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceId:
                  type: string
                  example: device-id
  /devices/{device_id}:
    put:
      tags:
        - Devices
      security:
        - bearerAuth: [ ]
      description: Update Device
      operationId: UpdateDevice
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: resource has been updated successfully
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fireBaseId:
                  type: string
                  example: some-firebase-id
  /devices/{fire_base_id}:
    get:
      tags:
        - Devices
      description: Fetch device by firebase ID
      operationId: FetchDeviceByFirebaseID
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
  /admin/student-ids:
    post:
      tags:
        - Admin
      description: Create student IDs
      operationId: CreateStudentIDs
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: resource has been created successfully
                  data:
                    $ref: "#/components/schemas/Student"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                advisorName:
                  type: string
                  example: John Doe's advisor
                advisorEmail:
                  type: string
                  example: advisor.of.john.doe@gmail.com
                studentId:
                  type: string
                  example: some-id
    get:
      tags:
        - Admin
      operationId: Fetch student Ids
      description: Latest student Ids of the application
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page
          in: query
          description: The page of the content
          required: false
          schema:
            type: integer
            example: 1
        - name: perPage
          in: query
          description: The amount of the students in one request
          required: false
          schema:
            type: integer
            example: 20
        - name: search
          in: query
          description: Search in advisor name, name, advisor email and student id fields
          required: false
          schema:
            type: string
            example: 2311
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Student"
                  meta:
                    $ref: "#/components/schemas/Meta"
  /admin/firebase:
    post:
      tags:
        - Admin
      description: Push Notification To Emails
      operationId: PushNotificationToEmails
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: resource has been created successfully
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                emails:
                  type: array
                  items:
                    type: string
                    example: john.doe@gmail.com
                title:
                  type: string
                  example: Test
                body:
                  type: string
                  example: Test for notification science
                type:
                  type: string
                  example: link,event
                meta:
                  type: string
                  example: Anything
  /admin/firebase/topic:
    post:
      tags:
        - Admin
      description: Push Notification To topic
      operationId: PushNotificationToTopic
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: resource has been created successfully
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                topic:
                  type: string
                  example: Student
                title:
                  type: string
                  example: Test
                body:
                  type: string
                  example: Test for notification science
                type:
                  type: string
                  example: link,event
                meta:
                  type: string
                  example: Anything
  /admin/agents:
    post:
      tags:
        - Admin
      description: Create agent
      operationId: CreateAgent
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: resource has been created successfully
                  data:
                    $ref: "#/components/schemas/Profile"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: john.doe@gmail.com
                password:
                  type: string
                  example: some-secure-password
    get:
      tags:
        - Admin
      operationId: Fetch agents
      description: Latest agents
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page
          in: query
          description: The page of the content
          required: false
          schema:
            type: integer
            example: 1
        - name: perPage
          in: query
          description: The amount of the students in one request
          required: false
          schema:
            type: integer
            example: 20
        - name: search
          in: query
          description: Search in email, phone number and name fields
          required: false
          schema:
            type: string
            example: agent
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Profile"
                  meta:
                    $ref: "#/components/schemas/Meta"
  /admin/agents/{agentId}:
    put:
      tags:
        - Admin
      security:
        - bearerAuth: [ ]
      description: Update Agent
      operationId: UpdateAgent
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Profile"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: john.doe@gmail.com
                phoneNumber:
                  type: string
                  example: +123456789
  /admin/student-ids/{studentId}:
    put:
      tags:
        - Admin
      security:
        - bearerAuth: [ ]
      description: Update student Id
      operationId: UpdateStudentId
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Student"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                advisorName:
                  type: string
                  example: John Doe's advisor
                advisorEmail:
                  type: string
                  example: advisor.of.john.doe@gmail.com
    delete:
      tags:
        - Admin
      operationId: Delete Student Id
      description: Delete an existing student Id from storage
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Resource has been created successfully.
        "404":
          description: Asset Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested resource not found.
        "403":
          description: User does not have access to modify the asset
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access to the resource is forbidden for this user

  /admin/student-ids/bulk:
    post:
      tags:
        - Admin
      description: Bulk create student IDs
      operationId: BulkCreateStudentIDs
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: resource has been created successfully
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                StudentIDs:
                  type: array
                  items:
                    type: object
                    properties:
                      advisorName:
                        type: string
                        example: John Doe's advisor
                      advisorEmail:
                        type: string
                        example: advisor.of.john.doe@gmail.com
                      studentId:
                        type: string
                        example: some-id
  /admin/student-ids/bulk/csv:
    post:
      tags:
        - Admin
      description: Bulk create student IDs using csv file
      operationId: BulkCreateStudentIDsUsingCSV
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: resource has been created successfully
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary

  /admin/assets:
    post:
      tags:
        - Admin
      description: Create an asset
      operationId: CreateAsset
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Asset"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: some title
                url:
                  type: string
                  example: https://drive.google.com/audio-file
                type:
                  type: string
                  example: File,Video,Link,Audio
  /admin/assets/{assetId}:
    put:
      tags:
        - Admin
      security:
        - bearerAuth: [ ]
      description: Update asset
      operationId: UpdateAsset
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Asset"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: some title
                url:
                  type: string
                  example: https://drive.google.com/audio-file
                type:
                  type: string
                  example: File,Video,Link,Audio
    delete:
      tags:
        - Admin
      operationId: Delete Asset
      description: Delete an existing asset from storage
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Resource has been created successfully.
        "404":
          description: Asset Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested resource not found.
        "403":
          description: User does not have access to modify the asset
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access to the resource is forbidden for this user
  /admin/services:
    post:
      tags:
        - Admin
      description: Create a service
      operationId: CreateService
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Service"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Lorem ipsum
                title:
                  type: string
                  example: Best billing service
                description:
                  type: string
                  example: Some description about the best billing service in the application
                about:
                  type: string
                  example: something about this service
                url:
                  type: string
                  example: https://meet.google.com/something
                cover:
                  type: string
                  example: https://url-to-cover.com/something.png
                email:
                  type: string
                  example: service@gmail.com
                phoneNumber:
                  type: string
                  example: +123456789
                categoryId:
                  type: string
                  example: some-generated-uuid
  /admin/services/{service_id}:
    put:
      tags:
        - Admin
      security:
        - bearerAuth: [ ]
      description: Update service
      operationId: UpdateService
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Service"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
        "404":
          description: Service Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested resource not found.
        "403":
          description: User does not have access to modify the service
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access to the resource is forbidden for this user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Lorem ipsum
                title:
                  type: string
                  example: Best billing service
                description:
                  type: string
                  example: Some description about the best billing service in the application
                about:
                  type: string
                  example: something about this service
                url:
                  type: string
                  example: https://meet.google.com/something
                cover:
                  type: string
                  example: https://url-to-cover.com/something.png
                email:
                  type: string
                  example: service@gmail.com
                phoneNumber:
                  type: string
                  example: +123456789
                categoryId:
                  type: string
                  example: some-generated-uuid
    delete:
      tags:
        - Admin
      operationId: Delete Service
      description: Delete an existing service from storage
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Resource has been created successfully.
        "404":
          description: Service Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested resource not found.
        "403":
          description: User does not have access to modify the service
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access to the resource is forbidden for this user
  /admin/services/upload:
    post:
      tags:
        - Admin
      operationId: Upload service cover
      description: Upload service cover
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      fileName:
                        type: string
                        example: File name to be used in create post as attachment
                      url:
                        type: string
                        example: https://path-to-image.com
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object

  /admin/assets/upload:
    post:
      tags:
        - Admin
      operationId: Upload asset
      description: Upload asset
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      fileName:
                        type: string
                        example: File name to be used in create post as attachment
                      url:
                        type: string
                        example: https://path-to-image.com
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object

  /admin/categories:
    post:
      tags:
        - Admin
      description: Create a category
      operationId: CreateCategory
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Category"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Billing
  /admin/categories/{category_id}:
    put:
      tags:
        - Admin
      security:
        - bearerAuth: [ ]
      description: Update category
      operationId: UpdateCategory
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Category"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error occurred.
                  errors:
                    type: object
        "404":
          description: Category Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested resource not found.
        "403":
          description: User does not have access to modify the category
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access to the resource is forbidden for this user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Billing
    delete:
      tags:
        - Admin
      operationId: Delete Category
      description: Delete an existing category from storage
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Resource has been created successfully.
        "404":
          description: Category Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested resource not found.
        "403":
          description: User does not have access to modify the category
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access to the resource is forbidden for this user
components:
  schemas:
    Notification:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            example: some-generated-uuid
          user:
            type: object
            properties:
              id:
                type: string
                example: some-generated-uuid
              name:
                type: string
                example: John Doe
              avatar:
                type: string
                example: https://path-to-avatar.com
          content:
            type: string
            example: Somebody posted a new event
          type:
            type: string
            example: General
          isRead:
            type: boolean
            example: true
          createdAt:
            type: string
            example: "2024-04-28T20:21:26.854076419Z"
    Login:
      type: array
      items:
        type: object
        properties:
          lockedUntil:
            type: string
            example: "2024-04-28T20:21:26.854076419Z"
          refreshToken:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6ImhzYW1pZC5hYWgwQGdtYWlsLmNvbSIsIklEIjoiMGFmMTI5ODMtODMzZS00ZDQ0LWJkMzAtNDczOWUyZjBjYmYyIiwiZXhwIjoxNzA5NDY3NjM2LCJpYXQiOjE3MDk0NjA0MzYsImlzcyI6Im1vaGFtbWFkIn0.eU6UyDmdVlIWnuOVQyLi8iVci6WQFa1Tjxl7FMEcQ2U
          accessToken:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJFbWFpbCI6ImhzYW1pZC5hYWgwQGdtYWlsLmNvbSIsIklEIjoiMGFmMTI5ODMtODMzZS00ZDQ0LWJkMzAtNDczOWUyZjBjYmYyIiwiZXhwIjoxNzA5NDY3NjM2LCJpYXQiOjE3MDk0NjA0MzYsImlzcyI6Im1vaGFtbWFkIn0.eU6UyDmdVlIWnuOVQyLi8iVci6WQFa1Tjxl7FMEcQ2U
          role:
            type: string
            example: Admin,Student
    Student:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        advisorName:
          type: string
          example: John Doe
        advisorEmail:
          type: string
          example: John.Doe@gmail.com
        studentId:
          type: string
          example: 23123
        isUsed:
          type: boolean
          example: false
        userName:
          type: string
          example: Student John
        updatedAt:
          type: string
          example: "2024-04-28T20:21:26.854076419Z"
    Profile:
      type: object
      properties:
        id:
          type: string
          example: some-generated-uuid
        name:
          type: string
          example: John Doe
        title:
          type: string
          example: Software Engineer
        role:
          type: string
          example: Student,Admin
        email:
          type: string
          example: John.Doe@gmail.com
        about:
          type: string
          example: "something about the user"
        phoneNumber:
          type: string
          example: +1234567890
        advisorName:
          type: string
          example: John Doe's advisor
        advisorEmail:
          type: string
          example: advisor.of.john.doe@gmail.com
        avatar:
          type: string
          example: "url to the avatar"
        background:
          type: string
          example: "url to the background image"
        studentId:
          type: string
          example: some-student-id
        createdAt:
          type: string
          example: "2024-04-28T20:21:26.854076419Z"
    Event:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            example: some-generated-uuid
          userID:
            type: string
            example: some-generated-uuid
          visibility:
            type: string
            example: Public,Private
          type:
            type: string
            example: Post,Event
          attended:
            type: boolean
            example: true
          createdAt:
            type: string
            example: "2024-04-28T20:21:26.854076419Z"
          commentsCount:
            type: integer
            example: 0
          reactionsCount:
            type: integer
            example: 0
          reaction:
            type: boolean
            example: false
          payload:
            type: object
            properties:
              content:
                type: string
                example: Some post or event content
              attachments:
                type: array
                items:
                  type: object
                  properties:
                    fileName:
                      type: string
                      example: The file name from the upload api
                    fileType:
                      type: string
                      example: The file type from the upload api
                    fileExtension:
                      type: string
                      example: .jpg
              type:
                type: string
                example: InPerson,Online
              eventName:
                type: string
                example: Some event name
              externalLink:
                type: string
                example: https://google.com
              location:
                type: string
                example: Canada, Vancouver, etc.
              startDate:
                type: string
                example: "2024-04-28T20:21:26.854076419Z"
              endDate:
                type: string
                example: "2024-04-28T20:21:26.854076419Z"
              attendees:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      type: string
                      example: some-uuid
                    createdAt:
                      type: string
                      example: "2024-04-28T20:21:26.854076419Z"
    Comment:
      type: object
      properties:
        id:
          type: string
          example: some-generated-uuid
        body:
          type: string
          example: some comment body
        user:
          type: object
          properties:
            id:
              type: string
              example: some-generated-uuid
            name:
              type: string
              example: John Doe
            title:
              type: string
              example: Software Engineer
            avatar:
              type: string
              example: https://url-to-image.com/image.png
        postID:
          type: string
          example: some-generated-uuid
        childrenCount:
          type: integer
          example: 1
        lastChild:
          type: object
          properties:
            id:
              type: string
              example: some-generated-uuid
            body:
              type: string
              example: some comment body
            user:
              type: object
              properties:
                id:
                  type: string
                  example: some-generated-uuid
                name:
                  type: string
                  example: John Doe
                title:
                  type: string
                  example: Software Engineer
                avatar:
                  type: string
                  example: https://url-to-image.com/image.png
            postID:
              type: string
              example: some-generated-uuid
            createdAt:
              type: string
              example: "2024-04-28T20:21:26.854076419Z"
        createdAt:
          type: string
          example: "2024-04-28T20:21:26.854076419Z"
    Asset:
      type: object
      properties:
        id:
          type: string
          example: some-generated-uuid
        title:
          type: string
          example: Some test title
        size:
          type: integer
          example: 2000.2
        unit:
          type: string
          example: MB,KB
        url:
          type: string
          example: https://drive.google.com/audio-file
        type:
          type: string
          example: File,Video,Link,Audio
        createdAt:
          type: string
          example: "2024-04-28T20:21:26.854076419Z"
        updatedAt:
          type: string
          example: "2024-04-28T20:21:26.854076419Z"
    Service:
      type: object
      properties:
        id:
          type: string
          example: some-uuid
        name:
          type: string
          example: Lorem ipsum
        title:
          type: string
          example: Best billing service
        description:
          type: string
          example: some description about the best billing service in the application
        cover:
          type: string
          example: https://url-to-covers.com/something.png
        email:
          type: string
          example: service@gmail.com
        about:
          type: string
          example: something about this service
        url:
          type: string
          example: https://meet.google.com/something
        phoneNumber:
          type: string
          example: +1234556677
        user:
          type: object
          properties:
            id:
              type: string
              example: some-generated-uuid
            name:
              type: string
              example: John Doe
            title:
              type: string
              example: Software Engineer
            avatar:
              type: string
              example: https://companion-covers.com/something.png
            createdAt:
              type: string
              example: "2024-04-28T20:21:26.854076419Z"
        category:
          type: object
          properties:
            id:
              type: string
              example: some-generated-uuid
            name:
              type: string
              example: Billing
        createdAt:
          type: string
          example: "2024-04-28T20:21:26.854076419Z"
        updatedAt:
          type: string
          example: "2024-04-28T20:21:26.854076419Z"
    Category:
      type: object
      properties:
        id:
          type: string
          example: some-generated-uuid
        name:
          type: string
          example: Billing
        createdAt:
          type: string
          example: "2024-04-28T20:21:26.854076419Z"
        updatedAt:
          type: string
          example: "2024-04-28T20:21:26.854076419Z"
    Device:
      type: object
      properties:
        id:
          type: string
          example: some-generated-uuid
        deviceName:
          type: string
          example: Iphone 12
        userId:
          type: string
          example: some-generated-uuid
        fireBaseId:
          type: string
          example: fire-base-id
        deviceId:
          type: string
          example: device-id
        os:
          type: string
          example: IOS
        osName:
          type: string
          example: IOS13
        revokedAt:
          type: string
          example: null|2024-04-28T20:21:26.854076419Z
    Meta:
      items:
        type: array
        items:
          type: object
          properties:
            totalItems:
              type: integer
              example: 20
            totalPages:
              type: integer
              example: 10
            current:
              type: integer
              example: 2
            next:
              type: integer
              example: 3
            previous:
              type: integer
              example: 1
            perPage:
              type: integer
              example: 10
    Post:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            example: some-generated-uuid
          userID:
            type: string
            example: some-generated-uuid
          visibility:
            type: string
            example: Public,Private
          type:
            type: string
            example: Post,Event
          attended:
            type: boolean
            example: false
          createdAt:
            type: string
            example: "2024-04-28T20:21:26.854076419Z"
          payload:
            type: object
            properties:
              content:
                type: string
                example: Some post or event content
              attachments:
                type: array
                items:
                  type: object
                  properties:
                    fileName:
                      type: string
                      example: The file name from the upload api
                    fileType:
                      type: string
                      example: The file type from the upload api
                    fileExtension:
                      type: string
                      example: .jpg
              type:
                type: string
                example: Post,Coop,Marketplace
          commentsCount:
            type: integer
            example: 0
          reactionsCount:
            type: integer
            example: 0
          reaction:
            type: boolean
            example: false
    Reaction:
      type: object
      properties:
        reactiveType:
          type: string
          example: Comment,Post
        reactiveId:
          type: string
          example: some-generated-uuid
        users:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: some-generated-uuid
              name:
                type: string
                example: John Doe
              title:
                type: string
                example: Software Engineer
              avatar:
                type: string
                example: https://url-to-avatar.com
              reactionType:
                type: string
                example: Like
              reactedAt:
                type: string
                example: "2024-04-28T20:21:26.854076419Z"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
